#! /usr/bin/env python3
import numpy as np
from mule.sdc import getSDCSetup
from mule.sdc.testing import setupDahlquistBenchmark, setupSDCConvergenceRuns, TEST_PARAMS

lamI = 0.0j
lamE = 0.0j
mu = 20.0
phi = 4*np.pi*1j
tEnd = np.pi + np.pi/2

def genTimeSteps(nStepMin=64, nRefinement=2):
    return [2*np.pi/(nStepMin*2**i) for i in range(nRefinement+1)]

# Setup Dahlquist benchmark and reference simulation
jg, terms = setupDahlquistBenchmark(tEnd, lamI, lamE, mu, phi, fExplicit=False)

for params in TEST_PARAMS:
    params = getSDCSetup(**params)
    dtSizes = genTimeSteps()
    # Edge cases -------------------------------------------------------------------------------
    expectedOrder = None
    if params['idString'] in [
        "M2_RADAU-LEFT_LEGENDRE_K0_BE_FE_QDELTA-BE_QUADRATURE",
        "M2_RADAU-LEFT_LEGENDRE_K1_BE_FE_COPY_QUADRATURE",
        "M2_RADAU-LEFT_LEGENDRE_K1_BE_FE_ZEROS_QUADRATURE",
        "M2_RADAU-RIGHT_LEGENDRE_K0_BE_FE_QDELTA-BE_QUADRATURE",
        "M2_RADAU-RIGHT_LEGENDRE_K1_BE_FE_COPY_QUADRATURE",
        "M2_RADAU-RIGHT_LEGENDRE_K1_BE_FE_QDELTA-BE_INTERPOLATION",
        "M2_RADAU-RIGHT_LEGENDRE_K1_BE_FE_QDELTA-BE_LASTNODE",
        "M2_RADAU-RIGHT_LEGENDRE_K1_BE_FE_ZEROS_QUADRATURE",
        "M2_RADAU-RIGHT_LEGENDRE_K2_BE_FE_COPY_INTERPOLATION",
        "M2_RADAU-RIGHT_LEGENDRE_K2_BE_FE_COPY_LASTNODE",
        "M2_RADAU-RIGHT_LEGENDRE_K2_BE_FE_ZEROS_INTERPOLATION",
        "M2_RADAU-RIGHT_LEGENDRE_K2_BE_FE_ZEROS_LASTNODE",
        "M3_RADAU-LEFT_EQUID_K0_BE_FE_QDELTA-BE_QUADRATURE",
        "M3_RADAU-LEFT_EQUID_K1_BE_FE_COPY_QUADRATURE",
        "M3_RADAU-LEFT_EQUID_K1_BE_FE_ZEROS_QUADRATURE",
        "M3_RADAU-RIGHT_EQUID_K0_BE_FE_QDELTA-BE_QUADRATURE",
        "M3_RADAU-RIGHT_EQUID_K1_BE_FE_COPY_QUADRATURE",
        "M3_RADAU-RIGHT_EQUID_K1_BE_FE_QDELTA-BE_INTERPOLATION",
        "M3_RADAU-RIGHT_EQUID_K1_BE_FE_QDELTA-BE_LASTNODE",
        "M3_RADAU-RIGHT_EQUID_K1_BE_FE_ZEROS_QUADRATURE",
        "M3_RADAU-RIGHT_EQUID_K2_BE_FE_COPY_INTERPOLATION",
        "M3_RADAU-RIGHT_EQUID_K2_BE_FE_COPY_LASTNODE",
        "M3_RADAU-RIGHT_EQUID_K2_BE_FE_ZEROS_INTERPOLATION",
        "M3_RADAU-RIGHT_EQUID_K2_BE_FE_ZEROS_LASTNODE",
        "M4_GAUSS_EQUID_K1_BE_FE_QDELTA-BE_INTERPOLATION",
        "M4_GAUSS_EQUID_K2_BE_FE_COPY_INTERPOLATION",
        "M4_GAUSS_EQUID_K2_BE_FE_ZEROS_INTERPOLATION",
        "M4_GAUSS_LEGENDRE_K1_BE_FE_QDELTA-BE_INTERPOLATION",
        "M4_GAUSS_LEGENDRE_K2_BE_FE_COPY_INTERPOLATION",
        "M4_GAUSS_LEGENDRE_K2_BE_FE_ZEROS_INTERPOLATION",
        "M4_RADAU-LEFT_EQUID_K1_BE_FE_QDELTA-BE_INTERPOLATION",
        "M4_RADAU-LEFT_EQUID_K2_BE_FE_COPY_INTERPOLATION",
        "M4_RADAU-LEFT_EQUID_K2_BE_FE_ZEROS_INTERPOLATION",
        "M4_RADAU-LEFT_LEGENDRE_K1_BE_FE_QDELTA-BE_INTERPOLATION",
        "M4_RADAU-LEFT_LEGENDRE_K2_BE_FE_COPY_INTERPOLATION",
        "M4_RADAU-LEFT_LEGENDRE_K2_BE_FE_ZEROS_INTERPOLATION"
        ]:
        expectedOrder = 3
    if params['idString'] in [
        "M2_GAUSS_LEGENDRE_K0_BE_FE_QDELTA-BE_QUADRATURE",
        "M2_GAUSS_LEGENDRE_K1_BE_FE_COPY_QUADRATURE",
        "M2_GAUSS_LEGENDRE_K1_BE_FE_QDELTA-BE_QUADRATURE",
        "M2_GAUSS_LEGENDRE_K1_BE_FE_ZEROS_QUADRATURE",
        "M2_GAUSS_LEGENDRE_K2_BE_FE_COPY_QUADRATURE",
        "M2_GAUSS_LEGENDRE_K2_BE_FE_ZEROS_QUADRATURE",
        "M3_GAUSS_EQUID_K0_BE_FE_QDELTA-BE_QUADRATURE",
        "M3_GAUSS_EQUID_K1_BE_FE_COPY_QUADRATURE",
        "M3_GAUSS_EQUID_K1_BE_FE_QDELTA-BE_QUADRATURE",
        "M3_GAUSS_EQUID_K1_BE_FE_ZEROS_QUADRATURE",
        "M3_GAUSS_EQUID_K2_BE_FE_COPY_QUADRATURE",
        "M3_GAUSS_EQUID_K2_BE_FE_ZEROS_QUADRATURE",
        "M3_LOBATTO_EQUID_K0_BE_FE_QDELTA-BE_QUADRATURE",
        "M3_LOBATTO_EQUID_K1_BE_FE_COPY_QUADRATURE",
        "M3_LOBATTO_EQUID_K1_BE_FE_QDELTA-BE_INTERPOLATION",
        "M3_LOBATTO_EQUID_K1_BE_FE_QDELTA-BE_LASTNODE",
        "M3_LOBATTO_EQUID_K1_BE_FE_QDELTA-BE_QUADRATURE",
        "M3_LOBATTO_EQUID_K1_BE_FE_ZEROS_QUADRATURE",
        "M3_LOBATTO_EQUID_K2_BE_FE_COPY_INTERPOLATION",
        "M3_LOBATTO_EQUID_K2_BE_FE_COPY_LASTNODE",
        "M3_LOBATTO_EQUID_K2_BE_FE_COPY_QUADRATURE",
        "M3_LOBATTO_EQUID_K2_BE_FE_QDELTA-BE_INTERPOLATION",
        "M3_LOBATTO_EQUID_K2_BE_FE_QDELTA-BE_LASTNODE",
        "M3_LOBATTO_EQUID_K2_BE_FE_ZEROS_INTERPOLATION",
        "M3_LOBATTO_EQUID_K2_BE_FE_ZEROS_LASTNODE",
        "M3_LOBATTO_EQUID_K2_BE_FE_ZEROS_QUADRATURE",
        "M3_LOBATTO_LEGENDRE_K0_BE_FE_QDELTA-BE_QUADRATURE",
        "M3_LOBATTO_LEGENDRE_K1_BE_FE_COPY_QUADRATURE",
        "M3_LOBATTO_LEGENDRE_K1_BE_FE_QDELTA-BE_INTERPOLATION",
        "M3_LOBATTO_LEGENDRE_K1_BE_FE_QDELTA-BE_LASTNODE",
        "M3_LOBATTO_LEGENDRE_K1_BE_FE_QDELTA-BE_QUADRATURE",
        "M3_LOBATTO_LEGENDRE_K1_BE_FE_ZEROS_QUADRATURE",
        "M3_LOBATTO_LEGENDRE_K2_BE_FE_COPY_INTERPOLATION",
        "M3_LOBATTO_LEGENDRE_K2_BE_FE_COPY_LASTNODE",
        "M3_LOBATTO_LEGENDRE_K2_BE_FE_COPY_QUADRATURE",
        "M3_LOBATTO_LEGENDRE_K2_BE_FE_QDELTA-BE_INTERPOLATION",
        "M3_LOBATTO_LEGENDRE_K2_BE_FE_QDELTA-BE_LASTNODE",
        "M3_LOBATTO_LEGENDRE_K2_BE_FE_ZEROS_INTERPOLATION",
        "M3_LOBATTO_LEGENDRE_K2_BE_FE_ZEROS_LASTNODE",
        "M3_LOBATTO_LEGENDRE_K2_BE_FE_ZEROS_QUADRATURE",
        "M4_GAUSS_EQUID_K0_BE_FE_QDELTA-BE_QUADRATURE",
        "M4_GAUSS_EQUID_K1_BE_FE_COPY_QUADRATURE",
        "M4_GAUSS_EQUID_K1_BE_FE_QDELTA-BE_QUADRATURE",
        "M4_GAUSS_EQUID_K1_BE_FE_ZEROS_QUADRATURE",
        "M4_GAUSS_EQUID_K2_BE_FE_COPY_QUADRATURE",
        "M4_GAUSS_EQUID_K2_BE_FE_ZEROS_QUADRATURE",
        "M4_LOBATTO_EQUID_K0_BE_FE_QDELTA-BE_QUADRATURE",
        "M4_LOBATTO_EQUID_K1_BE_FE_COPY_QUADRATURE",
        "M4_LOBATTO_EQUID_K1_BE_FE_QDELTA-BE_INTERPOLATION",
        "M4_LOBATTO_EQUID_K1_BE_FE_QDELTA-BE_LASTNODE",
        "M4_LOBATTO_EQUID_K1_BE_FE_QDELTA-BE_QUADRATURE",
        "M4_LOBATTO_EQUID_K1_BE_FE_ZEROS_QUADRATURE",
        "M4_LOBATTO_EQUID_K2_BE_FE_COPY_INTERPOLATION",
        "M4_LOBATTO_EQUID_K2_BE_FE_COPY_LASTNODE",
        "M4_LOBATTO_EQUID_K2_BE_FE_COPY_QUADRATURE",
        "M4_LOBATTO_EQUID_K2_BE_FE_QDELTA-BE_INTERPOLATION",
        "M4_LOBATTO_EQUID_K2_BE_FE_QDELTA-BE_LASTNODE",
        "M4_LOBATTO_EQUID_K2_BE_FE_ZEROS_INTERPOLATION",
        "M4_LOBATTO_EQUID_K2_BE_FE_ZEROS_LASTNODE",
        "M4_LOBATTO_EQUID_K2_BE_FE_ZEROS_QUADRATURE",
        "M4_RADAU-LEFT_EQUID_K0_BE_FE_QDELTA-BE_QUADRATURE",
        "M4_RADAU-LEFT_EQUID_K1_BE_FE_COPY_QUADRATURE",
        "M4_RADAU-LEFT_EQUID_K1_BE_FE_QDELTA-BE_QUADRATURE",
        "M4_RADAU-LEFT_EQUID_K1_BE_FE_ZEROS_QUADRATURE",
        "M4_RADAU-LEFT_EQUID_K2_BE_FE_COPY_QUADRATURE",
        "M4_RADAU-LEFT_EQUID_K2_BE_FE_ZEROS_QUADRATURE",
        "M4_RADAU-RIGHT_EQUID_K0_BE_FE_QDELTA-BE_QUADRATURE",
        "M4_RADAU-RIGHT_EQUID_K1_BE_FE_COPY_QUADRATURE",
        "M4_RADAU-RIGHT_EQUID_K1_BE_FE_QDELTA-BE_INTERPOLATION",
        "M4_RADAU-RIGHT_EQUID_K1_BE_FE_QDELTA-BE_LASTNODE",
        "M4_RADAU-RIGHT_EQUID_K1_BE_FE_QDELTA-BE_QUADRATURE",
        "M4_RADAU-RIGHT_EQUID_K1_BE_FE_ZEROS_QUADRATURE",
        "M4_RADAU-RIGHT_EQUID_K2_BE_FE_COPY_INTERPOLATION",
        "M4_RADAU-RIGHT_EQUID_K2_BE_FE_COPY_LASTNODE",
        "M4_RADAU-RIGHT_EQUID_K2_BE_FE_COPY_QUADRATURE",
        "M4_RADAU-RIGHT_EQUID_K2_BE_FE_QDELTA-BE_INTERPOLATION",
        "M4_RADAU-RIGHT_EQUID_K2_BE_FE_QDELTA-BE_LASTNODE",
        "M4_RADAU-RIGHT_EQUID_K2_BE_FE_ZEROS_INTERPOLATION",
        "M4_RADAU-RIGHT_EQUID_K2_BE_FE_ZEROS_LASTNODE",
        "M4_RADAU-RIGHT_EQUID_K2_BE_FE_ZEROS_QUADRATURE",
        ]:
        expectedOrder = 4
    if params['idString'] in [
        "M3_RADAU-LEFT_LEGENDRE_K0_BE_FE_QDELTA-BE_QUADRATURE",
        "M3_RADAU-LEFT_LEGENDRE_K1_BE_FE_COPY_QUADRATURE",
        "M3_RADAU-LEFT_LEGENDRE_K1_BE_FE_QDELTA-BE_QUADRATURE",
        "M3_RADAU-LEFT_LEGENDRE_K1_BE_FE_ZEROS_QUADRATURE",
        "M3_RADAU-LEFT_LEGENDRE_K2_BE_FE_COPY_QUADRATURE",
        "M3_RADAU-LEFT_LEGENDRE_K2_BE_FE_QDELTA-BE_QUADRATURE",
        "M3_RADAU-LEFT_LEGENDRE_K2_BE_FE_ZEROS_QUADRATURE",
        "M3_RADAU-RIGHT_LEGENDRE_K0_BE_FE_QDELTA-BE_QUADRATURE",
        "M3_RADAU-RIGHT_LEGENDRE_K1_BE_FE_COPY_QUADRATURE",
        "M3_RADAU-RIGHT_LEGENDRE_K1_BE_FE_QDELTA-BE_INTERPOLATION",
        "M3_RADAU-RIGHT_LEGENDRE_K1_BE_FE_QDELTA-BE_LASTNODE",
        "M3_RADAU-RIGHT_LEGENDRE_K1_BE_FE_QDELTA-BE_QUADRATURE",
        "M3_RADAU-RIGHT_LEGENDRE_K1_BE_FE_ZEROS_QUADRATURE",
        "M3_RADAU-RIGHT_LEGENDRE_K2_BE_FE_COPY_INTERPOLATION",
        "M3_RADAU-RIGHT_LEGENDRE_K2_BE_FE_COPY_LASTNODE",
        "M3_RADAU-RIGHT_LEGENDRE_K2_BE_FE_COPY_QUADRATURE",
        "M3_RADAU-RIGHT_LEGENDRE_K2_BE_FE_QDELTA-BE_INTERPOLATION",
        "M3_RADAU-RIGHT_LEGENDRE_K2_BE_FE_QDELTA-BE_LASTNODE",
        "M3_RADAU-RIGHT_LEGENDRE_K2_BE_FE_QDELTA-BE_QUADRATURE",
        "M3_RADAU-RIGHT_LEGENDRE_K2_BE_FE_ZEROS_INTERPOLATION",
        "M3_RADAU-RIGHT_LEGENDRE_K2_BE_FE_ZEROS_LASTNODE",
        "M3_RADAU-RIGHT_LEGENDRE_K2_BE_FE_ZEROS_QUADRATURE",
        ]:
        expectedOrder = 5
    if params['idString'] in [
        "M3_GAUSS_LEGENDRE_K0_BE_FE_QDELTA-BE_QUADRATURE",
        "M3_GAUSS_LEGENDRE_K1_BE_FE_COPY_QUADRATURE",
        "M3_GAUSS_LEGENDRE_K1_BE_FE_QDELTA-BE_QUADRATURE",
        "M3_GAUSS_LEGENDRE_K1_BE_FE_ZEROS_QUADRATURE",
        "M3_GAUSS_LEGENDRE_K2_BE_FE_COPY_QUADRATURE",
        "M3_GAUSS_LEGENDRE_K2_BE_FE_QDELTA-BE_QUADRATURE",
        "M3_GAUSS_LEGENDRE_K2_BE_FE_ZEROS_QUADRATURE",
        "M4_LOBATTO_LEGENDRE_K0_BE_FE_QDELTA-BE_QUADRATURE",
        "M4_LOBATTO_LEGENDRE_K1_BE_FE_COPY_QUADRATURE",
        "M4_LOBATTO_LEGENDRE_K1_BE_FE_QDELTA-BE_INTERPOLATION",
        "M4_LOBATTO_LEGENDRE_K1_BE_FE_QDELTA-BE_LASTNODE",
        "M4_LOBATTO_LEGENDRE_K1_BE_FE_QDELTA-BE_QUADRATURE",
        "M4_LOBATTO_LEGENDRE_K1_BE_FE_ZEROS_QUADRATURE",
        "M4_LOBATTO_LEGENDRE_K2_BE_FE_COPY_INTERPOLATION",
        "M4_LOBATTO_LEGENDRE_K2_BE_FE_COPY_LASTNODE",
        "M4_LOBATTO_LEGENDRE_K2_BE_FE_COPY_QUADRATURE",
        "M4_LOBATTO_LEGENDRE_K2_BE_FE_QDELTA-BE_INTERPOLATION",
        "M4_LOBATTO_LEGENDRE_K2_BE_FE_QDELTA-BE_LASTNODE",
        "M4_LOBATTO_LEGENDRE_K2_BE_FE_QDELTA-BE_QUADRATURE",
        "M4_LOBATTO_LEGENDRE_K2_BE_FE_ZEROS_INTERPOLATION",
        "M4_LOBATTO_LEGENDRE_K2_BE_FE_ZEROS_LASTNODE",
        "M4_LOBATTO_LEGENDRE_K2_BE_FE_ZEROS_QUADRATURE",
        ]:
        expectedOrder = 6
    if params['idString'] in [
        "M4_RADAU-LEFT_LEGENDRE_K0_BE_FE_QDELTA-BE_QUADRATURE",
        "M4_RADAU-LEFT_LEGENDRE_K1_BE_FE_COPY_QUADRATURE",
        "M4_RADAU-LEFT_LEGENDRE_K1_BE_FE_QDELTA-BE_QUADRATURE",
        "M4_RADAU-LEFT_LEGENDRE_K1_BE_FE_ZEROS_QUADRATURE",
        "M4_RADAU-LEFT_LEGENDRE_K2_BE_FE_COPY_QUADRATURE",
        "M4_RADAU-LEFT_LEGENDRE_K2_BE_FE_QDELTA-BE_QUADRATURE",
        "M4_RADAU-LEFT_LEGENDRE_K2_BE_FE_ZEROS_QUADRATURE",
        "M4_RADAU-RIGHT_LEGENDRE_K0_BE_FE_QDELTA-BE_QUADRATURE",
        "M4_RADAU-RIGHT_LEGENDRE_K1_BE_FE_COPY_QUADRATURE",
        "M4_RADAU-RIGHT_LEGENDRE_K1_BE_FE_QDELTA-BE_INTERPOLATION",
        "M4_RADAU-RIGHT_LEGENDRE_K1_BE_FE_QDELTA-BE_LASTNODE",
        "M4_RADAU-RIGHT_LEGENDRE_K1_BE_FE_QDELTA-BE_QUADRATURE",
        "M4_RADAU-RIGHT_LEGENDRE_K1_BE_FE_ZEROS_QUADRATURE",
        "M4_RADAU-RIGHT_LEGENDRE_K2_BE_FE_COPY_INTERPOLATION",
        "M4_RADAU-RIGHT_LEGENDRE_K2_BE_FE_COPY_LASTNODE",
        "M4_RADAU-RIGHT_LEGENDRE_K2_BE_FE_COPY_QUADRATURE",
        "M4_RADAU-RIGHT_LEGENDRE_K2_BE_FE_QDELTA-BE_INTERPOLATION",
        "M4_RADAU-RIGHT_LEGENDRE_K2_BE_FE_QDELTA-BE_LASTNODE",
        "M4_RADAU-RIGHT_LEGENDRE_K2_BE_FE_QDELTA-BE_QUADRATURE",
        "M4_RADAU-RIGHT_LEGENDRE_K2_BE_FE_ZEROS_INTERPOLATION",
        "M4_RADAU-RIGHT_LEGENDRE_K2_BE_FE_ZEROS_LASTNODE",
        "M4_RADAU-RIGHT_LEGENDRE_K2_BE_FE_ZEROS_QUADRATURE",
        ]:
        expectedOrder = 7
    if params['idString'] in [
        "M4_GAUSS_LEGENDRE_K0_BE_FE_QDELTA-BE_QUADRATURE",
        "M4_GAUSS_LEGENDRE_K1_BE_FE_COPY_QUADRATURE",
        "M4_GAUSS_LEGENDRE_K1_BE_FE_QDELTA-BE_QUADRATURE",
        "M4_GAUSS_LEGENDRE_K1_BE_FE_ZEROS_QUADRATURE",
        "M4_GAUSS_LEGENDRE_K2_BE_FE_COPY_QUADRATURE",
        "M4_GAUSS_LEGENDRE_K2_BE_FE_QDELTA-BE_QUADRATURE",
        "M4_GAUSS_LEGENDRE_K2_BE_FE_ZEROS_QUADRATURE",
        ]:
        expectedOrder = 8
        

    setupSDCConvergenceRuns(jg, terms, dtSizes, params, formulation="FP", expectedOrder=expectedOrder)
