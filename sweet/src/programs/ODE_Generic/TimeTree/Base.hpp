#ifndef PROGRAMS_ODE_GENERIC_DE_TIMETREE_BASE_HPP
#define PROGRAMS_ODE_GENERIC_DE_TIMETREE_BASE_HPP

#include <sweet/Error/Base.hpp>
#include <sweet/Error/Base.hpp>
#include <sweet/Shacks/ProgramArgumentsDictionary.hpp>
#include <sweet/TimeTree/InteriorNodes_Registry.hpp>
#include <sweet/TimeTree/TimeString_2_TimeTreeIR.hpp>
#include <sweet/TimeTree/TimeTree_Node_Base.hpp>
#include <sweet/TimeTree/TimeTree_Node_Registry.hpp>
#include <sweet/TimeTree/TimeTreeIR.hpp>
#include <sweet/TimeTree/TimeTreeIR_2_TimeTreeNodes.hpp>

////#include <sweet/Data/Scalar/Operators.hpp>

////#include "../DataContainer/Simulation.hpp"
/////#include "../DataContainer/Config.hpp"


namespace ODE_Generic {
namespace TimeTree {

class Base
{
public:
	sweet::Error::Base error;

	std::shared_ptr<sweet::TimeTree::TimeTree_Node_Base> timeIntegrator;
	sweet::TimeTree::TimeTree_Node_Base::EvalFun evalFun;

	// the time stepping tree generated by the string
	//sweet::TimeTree::TimeTree timeTree;

	// A registry of all PDE terms
	sweet::TimeTree::TimeTree_Node_Registry pdeTerm_registry;

	// A registry of all time steppers
	sweet::TimeTree::TimeTree_Node_Registry timeStepper_registry;


public:
	virtual
	bool setup_1_registerAllTimesteppers() = 0;

public:
	Base(){};

	virtual
	~Base(){};

	virtual
	bool setup_2_shackRegistration(
			sweet::Shacks::Dictionary *i_shackDict
	) = 0;

	virtual
	bool setup_3_timestepper(
			const std::string &i_timestepping_method,
			///const ODE_Generic::DE_Dahlquist::DataContainer::Config *i_config
			const sweet::Data::GenericContainer::ConfigBase *i_config
	) = 0;

	virtual
	bool runIntegration(
			const sweet::Data::GenericContainer::Base &i_U,
			sweet::Data::GenericContainer::Base &o_U,
			double i_simulationTime
	) = 0;

	virtual
	void clear() = 0;

};


}}

#endif
