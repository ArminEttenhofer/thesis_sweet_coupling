#ifndef PROGRAMS_ODE_GENERIC_DE_DAHLQUIST_TIMETREE_TIMETREEIR_HPP
#define PROGRAMS_ODE_GENERIC_DE_DAHLQUIST_TIMETREE_TIMETREEIR_HPP

#include <sweet/Error/Base.hpp>
#include <sweet/Error/Base.hpp>
#include <sweet/Shacks/ProgramArgumentsDictionary.hpp>
#include <sweet/TimeTree/InteriorNodes_Registry.hpp>
#include <sweet/TimeTree/TimeString_2_TimeTreeIR.hpp>
#include <sweet/TimeTree/TimeTree_Node_Base.hpp>
#include <sweet/TimeTree/TimeTree_Node_Registry.hpp>
#include <sweet/TimeTree/TimeTreeIR.hpp>
#include <sweet/TimeTree/TimeTreeIR_2_TimeTreeNodes.hpp>

///#include <sweet/Data/Scalar/Operators.hpp>

#include "../DataContainer/Simulation.hpp"
#include "../DataContainer/Config.hpp"

#include <programs/ODE_Generic/TimeTree/Base.hpp>

namespace ODE_Generic {
namespace DE_Dahlquist {

class TimeTree :
		public ODE_Generic::TimeTree::Base
{
public:
	//////sweet::Error::Base error;

	//////std::shared_ptr<sweet::TimeTree::TimeTree_Node_Base> timeIntegrator;
	//////sweet::TimeTree::TimeTree_Node_Base::EvalFun evalFun;

	//////// the time stepping tree generated by the string
	////////sweet::TimeTree::TimeTree timeTree;

	//////// A registry of all PDE terms
	//////sweet::TimeTree::TimeTree_Node_Registry pdeTerm_registry;

	//////// A registry of all time steppers
	//////sweet::TimeTree::TimeTree_Node_Registry timeStepper_registry;

	// Config file for DE solver
	ODE_Generic::DE_Dahlquist::DataContainer::Config deSolver_Config;

public:
	bool setup_1_registerAllTimesteppers() override;

public:
	TimeTree();

	bool setup_2_shackRegistration(
			sweet::Shacks::Dictionary *i_shackDict
	) override;

	bool setup_3_timestepper(
			const std::string &i_timestepping_method,
			const sweet::Data::GenericContainer::ConfigBase *i_config
			////const ODE_Generic::DE_Dahlquist::DataContainer::Config *i_config
	) override;

///////#if SWEET_XBRAID
///////	bool setup_3_timestepper(
///////			const std::string &i_timestepping_method,
///////			sweet::Shacks::ProgramArgumentsDictionary* i_progArhShackDict,
///////			sweet::Data::Scalar::Operators* io_ops,
///////			sweet::Data::Scalar::Operators* io_ops_complex,
///////			const DataContainer::Simulation &i_U
///////	);
///////#endif

	bool runIntegration(
			const sweet::Data::GenericContainer::Base &i_U,
			sweet::Data::GenericContainer::Base &o_U,
			double i_simulationTime
	) override;

	void clear() override;

	~TimeTree();
};


}}

#endif
